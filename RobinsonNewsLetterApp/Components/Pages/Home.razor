@page "/"
@rendermode InteractiveServer
@using Microsoft.Extensions.Options
@using RobinsonNewsletter.Core.Constants
@using RobinsonNewsletter.Core.Models;
@using RobinsonNewsletter.Core.Services.Email;
@using Microsoft.AspNetCore.Http;
@using System.Text.RegularExpressions
@using System.Diagnostics
@inject IHttpContextAccessor HttpContextAccessor
@inject IWebHostEnvironment Environment
@inject IEmailService emailService
@inject IJSRuntime JSRuntime
@inject IOptions<RubriqueImageOptions> rubriqueOptionsAccessor
@inject IOptions<AdminOptions> adminOptionsAccessor
@inject IOptions<EmailContentOptions> emailContentOptions
@inject IOptionsMonitor<EmailSettings> emailOptionsMonitor
@inject NavigationManager manager;


@if (isAuthorized)
{
    <PageTitle>Send Newsletter</PageTitle>

    <div class="content">
        <h1 class="form-title">Form of Newsletter</h1>

        <div class="form-container">
            <EditForm Model="@newsletterModel">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="formFile" class="form-label">Upload Mails</label>
                    <InputFile type="file" class="form-control" id="formFile customIdUploadFile" style="padding:6px;" OnChange="HandleFileMailListUpload" />
                    <ValidationMessage For="@(() => newsletterModel.FilePlaceHolder)" />
                    @if (showValidation)
                    {
                        <div class="validation-message">@FileValidationMessage</div>
                    }
                </div>
                <div class="form-group" id="subject">
                    <label>Write email subject</label>
                    <InputText class="form-control" @bind-Value="newsletterModel.Subject" />
                    <ValidationMessage For="@(()=>newsletterModel.Subject)" />
                </div>

                <div class="form-group">
                    <label for="refnumber">Ref Number:</label>
                    <InputNumber id="refnumber" class="form-control" min="1" @bind-Value="newsletterModel.RefNumber" />
                    <ValidationMessage For="@(() => newsletterModel.RefNumber)" />
                </div>

                <button type="button" class="btn btn-success addrubrique" @onclick="AddRubrique">Add Rubrique</button>

                @foreach (var rubrique in newsletterModel.Rubriques)
                {
                    <div style="position: relative;">
                        <Rubrique currentRubrique="rubrique" OnClick="RubriqueSaveHandler"></Rubrique>
                        <button type="button" @onclick="() => DeleteRubrique(rubrique)" style="position: absolute; top: 0; right: 10%; background-color: transparent; border: none; padding: 0;">
                            <i style="color: black;" class="bi bi-trash3"></i>
                        </button>
                    </div>
                }

                <br>
                @if (newsletterModel.Rubriques.Count > 0 && newsletterModel.Rubriques.TrueForAll(r => r.IsSaved) && emails.Count > 0)
                {
                    <div class="flex-container">
                        <button type="button" class="btn btn-primary submit" @onclick="AttemptSubmit">Submit</button>
                    </div>
                }

            </EditForm>

        </div>
    </div>
    @if (isModalVisible)
    {
        <div id="successModal" class="modal" style="display: block;">
            <div class="modal-content" style="text-align:center">
                <p>Email has been successfully sent!</p>
                <button type="button" class="btn btn-primary" @onclick="ResetForm">Okay, send a new email</button>
            </div>
        </div>
    }
}
else
{
    <p>Please enter the password to view this page.</p>
}



@code {
    private NewsletterModel newsletterModel = new NewsletterModel { Rubriques = new List<SingleRubriqueModel>() };
    private bool isAuthorized = false;
    private bool showRubriques = false;
    private bool shouldSubmit = false;
    private bool showValidation = true;
    private string FileValidationMessage;
    private List<string> emails = new List<string>();
    private bool isModalVisible = false;

    private async Task HandleSubmit()
    {
        if (!shouldSubmit)
        {
            return;
        }

        string htmlContent = string.Empty;
        foreach (var rubrique in newsletterModel.Rubriques)
        {
            if (!rubrique.Sections.Any())
            {
                continue;
            }

            htmlContent += emailContentOptions.Value.RubriqueImageHTMLContent.Replace("{{RubriqueSourceImage}}", rubrique.RubriqueSourceImage);
            foreach (var section in rubrique.Sections)
            {
                htmlContent += emailContentOptions.Value.RubriqueSectionHTMLContent.Replace("{{ImageBase64}}", section.ImageBase64)
                                                                                   .Replace("{{Title}}", section.Title)
                                                                                   .Replace("{{Text}}", section.Text)
                                                                                   .Replace("{{ButtonUrl}}", section.ButtonUrl)
                                                                                   .Replace("{{ButtonText}}", section.ButtonText)
                                                                                   .Replace("{{ButtonDisplay}}", section.ButtonDisplay ? "inline-block" : "none");
            }
        }

        if (string.IsNullOrEmpty(htmlContent))
        {
            return;
        }

        var EmailModel = new NewsLetterEmailContent();
        EmailModel.RefNumber = newsletterModel.RefNumber;
        EmailModel.Content = htmlContent;
        EmailModel.Subject = newsletterModel.Subject;
        await emailService.SendMailFromTemplateAsync<NewsLetterEmailContent>(EmailModel, emails, emailOptionsMonitor.CurrentValue.NewsLetterTemplateID);

        isModalVisible = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    private async Task AttemptSubmit()
    {
        shouldSubmit = true;
        await HandleSubmit();
    }

    private void AddRubrique()
    {
        newsletterModel.Rubriques.Add(new SingleRubriqueModel { Sections = new List<SingleSectionModel>() });
    }

    private void DeleteRubrique(SingleRubriqueModel rubrique)
    {
        newsletterModel.Rubriques.Remove(rubrique);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        int pinCount = 0;
        if (firstRender)
        {
            // check password
            var password = await JSRuntime.InvokeAsync<string>("prompt", "Please enter the password:");
            while (password != adminOptionsAccessor.Value.Password)
            {
                password = await JSRuntime.InvokeAsync<string>("prompt", "Incorrect password, try again:");
            }

            // verify with email OTP
            var email = await JSRuntime.InvokeAsync<string>("prompt", "Please enter an email to receive OTP. Please make sure you write a correct email.");
            var TwoFactorMod = new TwoFactorModel();
            TwoFactorMod.OneTimePin = new Random().Next(100000, 1000000);
            await emailService.SendMailFromTemplateAsync<TwoFactorModel>(TwoFactorMod, [email], emailOptionsMonitor.CurrentValue.TwoFactorTemplateID);

            // check OTP from email
            var pin = await JSRuntime.InvokeAsync<string>("prompt", "Please enter the pin:");
            while (pin != TwoFactorMod.OneTimePin.ToString())
            {
                if (pinCount == 2)
                {
                    return;
                }
                pinCount += 1;
                pin = await JSRuntime.InvokeAsync<string>("prompt", "Incorrect pin, try again. Remaining attempts: " + (3 - pinCount));
            }

            isAuthorized = true;
            StateHasChanged();
        }
    }

    // private async Task HandleImageUpload(InputFileChangeEventArgs e)
    // {
    //     var file = e.GetMultipleFiles().First();
    //     try
    //     {
    //         // using var memoryStream = new MemoryStream();
    //         // await file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).CopyToAsync(memoryStream);
    //         // var bytes = memoryStream.ToArray();
    //         // newsletterModel.ImageBase64 = Convert.ToBase64String(bytes);
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine(ex);
    //     }
    // }

    private async Task HandleFileMailListUpload(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().First();
        try
        {
            if (file != null)
            {
                if (file.ContentType == ValidationLiterals.TxtFileContent)
                {
                    showValidation = false;
                    if (file.Size > ValidationLiterals.EmailFileSize)
                    {
                        showValidation = true;
                        FileValidationMessage = ErrorMessages.FileSizeExceeds;
                        return;
                    }
                    using var stream = file.OpenReadStream(maxAllowedSize: ValidationLiterals.EmailFileSize); // Limit file size to 1MB
                    using var reader = new StreamReader(stream);
                    string line;
                    while ((line = await reader.ReadLineAsync()) != null)
                    {
                        var emailPattern = @"\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b";
                        if (Regex.IsMatch(line, emailPattern))
                        {
                            var matches = Regex.Matches(line, emailPattern);
                            foreach (Match match in matches)
                            {
                                emails.Add(match.Value);
                            }
                        }
                    }
                    if (emails.Count == 0)
                    {
                        showValidation = true;
                        FileValidationMessage = ErrorMessages.CannotRetrieveEmails;
                    }
                }
                else
                {
                    showValidation = true;
                    FileValidationMessage = ErrorMessages.WrongFileFormat;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    void RubriqueSaveHandler(string msg)
    {
        StateHasChanged();
    }

    private void ResetForm()
    {
        emails.Clear();
        newsletterModel = new NewsletterModel { Rubriques = new List<SingleRubriqueModel>() };
        isModalVisible = false;
        StateHasChanged();
    }
}